#!/usr/bin/env node
///////////////////////////////////////////////////////////////////////////////

var ArgumentParser = require('argparse').ArgumentParser,
    assert = require('assert'),
    ProtoBuf = require("protobufjs"),
    WebSocket = require('ws');

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

var parser = new ArgumentParser({
    addHelp: true, description: 'RPC Server', version: '0.0.1'
});

parser.addArgument(['port'], {
    nargs: '?', help: 'Server Port', defaultValue: '8088'
});
parser.addArgument(['host'], {
    nargs: '?', help: 'Server Host', defaultValue: 'localhost'
});

///////////////////////////////////////////////////////////////////////////////

var args = parser.parseArgs();

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

var Core = ProtoBuf.loadProtoFile({
    root: __dirname + '/../protocol', file: 'core.proto'
});

var RpcMessage = Core.build('RpcMessage');

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

var WebSocketServer = require('ws').Server;

///////////////////////////////////////////////////////////////////////////////

var wss = new WebSocketServer({
    host: args.host, port: args.port
});

wss.on('connection', function (ws) {
    ws.on('message', function (data) {
        var rpc_message = RpcMessage.decode(data);
        assert.equal(rpc_message.value, '.');

        var buffer = rpc_message.encode();
        ws.send(buffer.toBuffer());
    });
});

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

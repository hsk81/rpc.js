#!/usr/bin/env node
///////////////////////////////////////////////////////////////////////////////

var ArgumentParser = require('argparse').ArgumentParser,
    assert = require('assert'),
    moment = require('moment'),
    ProtoBuf = require("protobufjs"),
    WebSocket = require('ws');

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

var parser = new ArgumentParser({
  addHelp: true, description: 'RPC Client', version: '0.0.1'
});

parser.addArgument(['port'], {
    nargs: '?', help: 'Server Port', defaultValue: '8088'
});
parser.addArgument(['host'], {
    nargs: '?', help: 'Server Host', defaultValue: 'localhost'
});

///////////////////////////////////////////////////////////////////////////////

var args = parser.parseArgs();

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

var Core = ProtoBuf.loadProtoFile({
    root: __dirname + '/../protocol', file: 'core.proto'
});

var RpcMessage = Core.build('RpcMessage');

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

var ws = new WebSocket('ws://' + args.host + ':' + args.port);

///////////////////////////////////////////////////////////////////////////////

ws.onmessage = function (ev) {
    var rpc_message = RpcMessage.decode(ev.data);
    assert.equal(rpc_message.value, '.');

    var next = moment(), diff = next.diff(GLOBAL.last || moment(), true);
    GLOBAL.last = next;
    console.log(diff);
};

///////////////////////////////////////////////////////////////////////////////

ws.onopen = function () {
    var id = setInterval(function () {
        var rpc_message = new RpcMessage({value: '.'}),
            buffer = rpc_message.encode();

        ws.send(buffer.toBuffer());
    }, 0);

    setTimeout(function () {
        clearInterval(id);
        ws.close();
    }, 10000);
};

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
